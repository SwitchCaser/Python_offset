# САЙТ ДЛЯ ПРИВЕДЕНИЯ КОДА К PEP8
# https://extendsclass.com/python-formatter.html
#





#---------------------------------------------
#                   5
#---------------------------------------------

# >>> main([-0.11, 0.05, -0.03],[-0.92, -0.7, -0.08],[0.99, -0.77, 0.74]) // Ваня Лягов
# 

import math as m


def main(x, y, z):
    n = len(x)
    x = [0] + x
    y = [0] + y
    z = [0] + z
    sum = 0
    for i in range(1, n + 1):
        term1 = 30 * (y[n + 1 - i] ** 3)
        term2 = -x[n + 1 - m.ceil(i / 2)]
        term3 = -(z[n + 1 - m.ceil(i / 2)] ** 2)
        sum += term1 + term2 + term3
    return sum * 7



#---------------------------------------------
#                   6
#---------------------------------------------

# // 13 (Андрей Лахов)
#

def firsLine(x0, x1, x2, x3):
    if(x0 == 'OPA'):
        return SecondParam1(x2, x3)
    if(x0 == 'LIMBO'):
        return SecondParam2(x1, x2)
    if(x0 == 'APL'):
        return 10


def SecondParam1(x2, x3):
    if(x2 == 1983):
        return ThirdParam1(x3)
    if(x2 == 1964):
        return 3
    if(x2 == 1984):
        return 4


def SecondParam2(x1, x2):
    if(x2 == 1983):
        return ThirdParam2(x1)
    if(x2 == 1964):
        return 8
    if(x2 == 1984):
        return 9


def ThirdParam1(x3):
    if(x3 == 1975):
        return 0
    if(x3 == 2016):
        return 1
    if(x3 == 1969):
        return 2


def ThirdParam2(x1):
    if(x1 == 1957):
        return 5
    if(x1 == 1970):
        return 6
    if(x1 == 1985):
        return 7


def main(x):
    return firsLine(x[0], x[1], x[2], x[3])


# main([2008, 'BISON', 'OPA', 1993, 1980] // Ваня Лягов
# 7

def main(x):
    patterns = {
        (1999, None, 'OPA', 1993, None): 0,
        (1999, None, 'OPA', 1994, None): 1,
        (1999, None, 'OPA', 1992, 1962): 2,
        (1999, None, 'OPA', 1992, 1980): 3,
        (2008, 'HY', 'OPA', None, 1962): 4,
        (2008, 'HY', 'OPA', None, 1980): 5,
        (2008, 'DM', 'OPA', None, None): 6,
        (2008, 'BISON', 'OPA', 1993, None): 7,
        (2008, 'BISON', 'OPA', 1994, None): 8,
        (2008, 'BISON', 'OPA', 1992, None): 9,
        (1960, None, 'OPA', None, None): 10,
        (None, None, 'TOML', None, None): 11,
        (None, None, 'MAX', None, None): 12,
    }

    for pattern, result in patterns.items():
        match = True
        for i in range(len(pattern)):
            if pattern[i] is not None and pattern[i] != x[i]:
                match = False
                break
        if match:
            return result
    return None

# 
#

#---------------------------------------------
#                   7
#---------------------------------------------

# >>> main({'Z1': '4', 'Z2': '82', 'Z3': '11', 'Z4': '21', 'Z5': '4'}) // 13 (Андрей Лахов)
# 4906276

def converter(Z1, Z2, Z3, Z4, Z5):
    numZ1 = int(Z1)
    numZ2 = int(Z2)
    numZ3 = int(Z3)
    numZ4 = int(Z4)
    numZ5 = int(Z5)

    answer = numZ5
    answer = answer << 5
    answer = answer | numZ4
    answer = answer << 4
    answer = answer | numZ3
    answer = answer << 7
    answer = answer | numZ2
    answer = answer << 4
    answer = answer | numZ1
    return answer


def main(x):
    return converter(x['Z1'], x['Z2'], x['Z3'], x['Z4'], x['Z5'])
    
# >>> main(64263930) // Юля Трофимова
# '0x5af527a'

def main(num):
    num = int(num)
    d1 = num & (2**7 - 1)
    d2 = (num >> 7) & (2**6 - 1)
    d3 = (num >> 13) & (2**10 - 1)
    d4 = (num >> 23) & (2**4 - 1)
    return hex((d2 << 21) + (d4 << 17) + (d3 << 7) + d1)
    
# >>> main('0x1ac0998c') // 21 (Саша Сердюков)
# [('V1', '0xc'), ('V2', '0x3'), ('V3', '0x4c'), ('V4', '0x0'), ('V5', '0x6b'), ('V6', '0x0')]



# >>> main('1422331148') // 22 (Соня Сивцова)
# '0x6230d0c'

#####Первое решение(оптимальное)
def main(x):
    return GetValue(x)

def GetValue(x):
    number = int(x)
    W1 = number & int('11111111',2)
    number = number >> 8
    W2 = number & int('1111111111',2)
    number = number >> 10
    W3 = number & int('1111111',2)
    number = number >> 7
    number = number >> 6
    W5 = number & int('111',2)

    #000 101010 0110001 1100001101 00001100
    #000000 0110001 000 1100001101 00001100

    answer = W3
    answer = (answer << 3) | W5
    answer = (answer << 10) | W2
    answer = (answer << 8) | W1

    return answer

a = main('1422331148')
print(hex(a))

#####Второе решение(неоптимальное)
def main(decimal_string):
    decimal_number = int(decimal_string)
    
    w1 = format(int(bin(decimal_number & 0xFF), 2), '08b')
    w2 = format(int(bin((decimal_number & 0x3FFFF) >> 8), 2), '010b')
    w3 = format(int(bin((decimal_number & 0x1FFFFFF) >> 18), 2), '07b')
    w5 = format(int(bin(decimal_number >> 31), 2), '03b')
    
    return hex(int(w3 + w5 + w2 + w1, 2))


# main('0x38f1553')        // 28
# '62432083'

def main(x):
    dec = int(x, 16)
    H1 = 0b111111111 & dec
    H2 = ((dec >> 9) & 0b1) << 22
    H3 = ((dec >> 10) & 0b111111111) << 13
    H4 = ((dec >> 19) & 0b1111) << 9
    H5 = ((dec >> 23) & 0b111) << 23
    return H1 | H2 | H3 | H4 | H5


#---------------------------------------------
#                   8
#---------------------------------------------

# [ define 'errebi' := { leed_684 . onrebe_686 }.].[ define 'tius' :={    // 21 (Саша Сердюков)
# rasodi_67 . gela }.].[define 'isen_272':={ ceaated_924 . eddiri_329 .
# orceve . rala_499 }. ].[ define 'maedra' := { dius_549 . maes}. ]

# {'errebi': ['leed_684', 'onrebe_686'],
# 'tius': ['rasodi_67', 'gela'],
# 'isen_272': ['ceaated_924', 'eddiri_329', 'orceve', 'rala_499'],
# 'maedra': ['dius_549', 'maes']}

import re

def parse_string(input_string):
    pattern = r"define '(\w+)' := \{([^}]+)\}"
    matches = re.findall(pattern, input_string)

    result = {}
    for match in matches:
        key = match[0]
        values = match[1].split('. ')
        result[key] = values

    return result

input_string = "[ define 'errebi' := { leed_684 . onrebe_686 }.].[ define 'tius' :={ rasodi_67 . gela }]." \
               "[define 'isen_272':={ ceaated_924 . eddiri_329 . orceve . rala_499 }. ]." \
               "[ define 'maedra' := { dius_549 . maes}. ]"

output = parse_string(input_string)
print(output)


#---------------------------------------------
#                   9
#---------------------------------------------



#---------------------------------------------
#                   10
#---------------------------------------------

# o = main() // 13 (Андрей Лахов)
#o.etch() # 0
#o.init() # 3
#o.pan() # 1
#o.init() # 5
#o.etch() # 0
#o.pan() # 1
#o.etch() # 4
#o.init() # 6
#o.pan() # MealyError
#o.etch() # 7
#o.init() # 8
#o.init() # 6
#

class MealyError(Exception):
    def __init__(self, nameOfMethod):
        self.ExceptionMethod = nameOfMethod


class Avtomat:
    State = "A"

    def etch(self):
        if(self.State == "A"):
            self.State = "B"
            return 0
        elif(self.State == "B"):
            self.State = "D"
            return 2
        elif(self.State == "C"):
            self.State = "D"
            return 4
        elif(self.State == "E"):
            self.State = "F"
            return 7
        else:
            raise MealyError(self.etch.__name__)

    def init(self):
        if(self.State == "B"):
            return 3
        elif(self.State == "C"):
            self.State = "A"
            return 5
        elif(self.State == "D"):
            self.State = "E"
            return 6
        elif(self.State == "F"):
            self.State = "D"
            return 8
        else:
            raise MealyError(self.init.__name__)

    def pan(self):
        if(self.State == "B"):
            self.State = "C"
            return 1
        else:
            raise MealyError(self.pan.__name__)


def main():
    return Avtomat()


def test():
    o = main()
    assert o.etch() == 0
    assert o.etch() == 2
    o.State = "C"
    assert o.etch() == 4
    o.State = "E"
    assert o.etch() == 7
    o.State = "D"
    try:
        assert o.etch()
    except MealyError:
        pass

    o.State = "B"
    assert o.init() == 3
    o.State = "C"
    assert o.init() == 5
    o.State = "D"
    assert o.init() == 6
    o.State = "F"
    assert o.init() == 8
    o.State = "A"
    try:
        assert o.init()
    except MealyError:
        pass

    o.State = "B"
    assert o.pan() == 1
    try:
        assert o.pan()
    except MealyError:
        pass
